{"version":3,"sources":["components/PhotoCard.module.css","components/Gallery.module.css","components/PhotoCard.js","components/Gallery.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","photoCard","picture","image-container","photoGallery","PhotoCard","state","isHidden","setImageSrc","e","_this","setState","_this2","this","react_default","a","createElement","Fragment","props","photo","className","style","visibility","concat","build","threshold","onLoad","media","srcSet","src","alt","title","Component","Gallery","photos","length","map","index","components_PhotoCard","key","SearchBar","name","onChange","onSearch","target","value","App","photoSearchResult","searchInput","handleChange","debounce","inputValue","loadPhotos","componentDidMount","axios","method","url","process","then","response","console","log","data","photoDetails","id","farm","server","secret","catch","err","componentWillUnmount","cancel","components_SearchBar","components_Gallery","Boolean","window","location","hostname","match","dotenv","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b77d4ace.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoCard\":\"PhotoCard_photoCard__1mobB\",\"picture\":\"PhotoCard_picture__85hCO\",\"image-container\":\"PhotoCard_image-container__2Mw_i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoGallery\":\"Gallery_photoGallery__3ZEpo\"};","import React, { Component } from \"react\";\r\nimport { photoCard, picture } from \"./PhotoCard.module.css\";\r\nimport { LazyLoadComponent } from \"react-lazy-load-image-component\";\r\n\r\nclass PhotoCard extends Component {\r\n  state = { isHidden: true };\r\n  setImageSrc = e => {\r\n    this.setState({\r\n      isHidden: false\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.photo && (\r\n          <div\r\n            className={photoCard}\r\n            style={{\r\n              visibility: `${this.state.isHidden ? \"hidden\" : \"visible\"}`\r\n            }}\r\n          >\r\n            <div className='image-container'>\r\n              <LazyLoadComponent threshold={0}>\r\n                <picture className={picture} onLoad={() => this.setImageSrc()}>\r\n                  <source\r\n                    media='(min-width: 1050px)'\r\n                    srcSet={`${this.props.photo.src}_b.jpg`}\r\n                  />\r\n                  <source\r\n                    media='(min-width: 780px)'\r\n                    srcSet={`${this.props.photo.src}_z.jpg`}\r\n                  />\r\n                  <img src={`${this.props.photo.src}_n.jpg`} alt='flickr-pic' />\r\n                </picture>\r\n              </LazyLoadComponent>\r\n              <div>\r\n                <p>{this.props.photo.title}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhotoCard;\r\n","import React, { Component } from \"react\";\r\nimport PhotoCard from \"./PhotoCard\";\r\nimport { photoGallery } from \"./Gallery.module.css\";\r\n\r\nclass Gallery extends Component {\r\n  render() {\r\n    return (\r\n      <div className={photoGallery}>\r\n        {this.props.photos.length > 0 &&\r\n          this.props.photos.map((photo, index) => {\r\n            return (\r\n              \r\n              <PhotoCard\r\n                index={index}\r\n                photo={photo}\r\n                key={`card-photo-${index}`}\r\n              />\r\n\r\n            );\r\n          })}\r\n      </div>\r\n      // TODO: add pagination, make mosaic\r\n    );\r\n\r\n  }\r\n\r\n};\r\n\r\nexport default Gallery;\r\n","import React from \"react\";\r\n\r\nconst SearchBar = props => {\r\n  return (\r\n    <input\r\n      className='searchBox'\r\n      name='searchInput'\r\n      onChange={e => props.onSearch(e.target.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport { debounce } from \"lodash\";\r\nimport Gallery from \"./components/Gallery\";\r\nimport SearchBar from \"./components/SearchBar\";\r\n\r\nclass App extends Component {\r\n  state = { photoSearchResult: [], searchInput: \"Amsterdam\" };\r\n  handleChange = debounce(inputValue => {\r\n    this.setState({ searchInput: inputValue });\r\n    this.loadPhotos();\r\n  }, 500);\r\n  componentDidMount = () => this.loadPhotos();\r\n  loadPhotos = () => {\r\n    // TODO: add parameters to url variables\r\n    axios({\r\n      method: \"get\",\r\n      url: `${process.env.REACT_APP_API_URL}?method=${\r\n        this.state.searchInput\r\n          ? process.env.REACT_APP_API_METHOD_SEARCH\r\n          : process.env.REACT_APP_API_METHOD_RECENT\r\n      }&api_key=${process.env.REACT_APP_API_KEY}&tags=${\r\n        this.state.searchInput\r\n      }&sort=relevance&safe_search=1&format=json&nojsoncallback=1`\r\n    })\r\n      .then(response => {\r\n        console.log(response.data);\r\n        let photoDetails = response.data.photos.photo.map(photo => ({\r\n          id: photo.id,\r\n          title: photo.title,\r\n          src: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${\r\n            photo.id\r\n          }_${photo.secret}`\r\n        }));\r\n        this.setState({ photoSearchResult: photoDetails });\r\n      })\r\n      // TODO: proper error handling\r\n      .catch(err => console.log(err));\r\n  };\r\n  componentWillUnmount = () => this.handleChange.cancel();\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <header className='App-header'>\r\n          <div>\r\n            <h1>Flickr search</h1>\r\n            <SearchBar onSearch={this.handleChange} />\r\n          </div>\r\n          <Gallery photos={this.state.photoSearchResult} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport dotenv from 'dotenv';\r\ndotenv.config()\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}