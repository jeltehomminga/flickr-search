{"version":3,"sources":["components/PhotoCard.module.css","components/Pagination.module.css","components/Gallery.module.css","components/SearchBar.module.css","components/PhotoCard.js","components/Pagination.js","components/Gallery.js","api/api.js","components/SearchBar.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["module","exports","photoCard","picture","image-container","button","photoGallery","searchBox","PhotoCard","state","isHidden","setImageSrc","e","_this","setState","_this2","this","_this$props$photo","props","photo","title","farm","id","server","secret","src","concat","react_default","a","createElement","Fragment","className","style","visibility","build","threshold","onLoad","media","srcSet","alt","Component","connect","photos","showGallery","searchInput","dispatch","handleNewSearch","type","newSearch","setTimeout","nextPage","value","onClick","map","index","components_PhotoCard","key","components_Pagination","length","api","axios","method","url","process","then","response","data","handleInputChange","target","Api","handleFocusDone","ref","useRef","useEffect","current","focus","lib","inputRef","debounceTimeout","name","onChange","placeholder","autoComplete","App","components_SearchBar","components_Gallery","Boolean","window","location","hostname","match","initialState","showPages","store","createStore","arguments","undefined","action","console","log","Object","objectSpread","__REDUX_DEVTOOLS_EXTENSION__","dotenv","config","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f560380b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoCard\":\"PhotoCard_photoCard__1mobB\",\"picture\":\"PhotoCard_picture__85hCO\",\"image-container\":\"PhotoCard_image-container__2Mw_i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Pagination_button__HFkvj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoGallery\":\"Gallery_photoGallery__3ZEpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchBar_searchBox__29Cry\"};","import React, { Component } from \"react\";\r\nimport { photoCard, picture } from \"./PhotoCard.module.css\";\r\nimport { LazyLoadComponent } from \"react-lazy-load-image-component\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PhotoCard extends Component {\r\n  state = { isHidden: true };\r\n  setImageSrc = e => {\r\n    this.setState({\r\n      isHidden: false\r\n    });\r\n  };\r\n  render() {\r\n    const { title, farm, id, server, secret } = this.props.photo;\r\n    const src = `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}`;\r\n    return (\r\n      <>\r\n        {this.props.photo && (\r\n          <div\r\n            className={photoCard}\r\n            style={{\r\n              visibility: `${this.state.isHidden ? \"hidden\" : \"visible\"}`\r\n            }}\r\n          >\r\n            <LazyLoadComponent threshold={150}>\r\n              <div className='image-container'>\r\n                <picture className={picture} onLoad={() => this.setImageSrc()}>\r\n                  <source media='(min-width: 1200px)' srcSet={`${src}_b.jpg`} />\r\n                  <source media='(min-width: 450px)' srcSet={`${src}_z.jpg`} />\r\n                  <img src={`${src}_n.jpg`} alt='flickr-pic' />\r\n                  <div>\r\n                    <p>{title}</p>\r\n                  </div>\r\n                </picture>\r\n              </div>\r\n            </LazyLoadComponent>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  photos: state.photos.photo,\r\n  showGallery: state.showGallery\r\n});\r\n\r\nexport default connect(mapStateToProps)(PhotoCard);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { button } from \"./Pagination.module.css\";\r\n// import Api from \"../api/api\";\r\n\r\nconst Pagination = props => {\r\n  return (\r\n    <>\r\n      {props.nextPage ? (\r\n        <button className={button}>Next Page</button>\r\n      ) : (\r\n        <button\r\n          className={button}\r\n          value={props.searchInput}\r\n          onClick={props.handleNewSearch}\r\n        >\r\n          New Search\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({ searchInput: state.searchInput });\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleNewSearch: () => {\r\n      dispatch({ type: \"FOCUSEARCH\", newSearch: true });\r\n      setTimeout(\r\n        () => dispatch({ type: \"FOCUSEARCH\", newSearch: false }),\r\n        3000\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Pagination);\r\n","import React from \"react\";\r\nimport PhotoCard from \"./PhotoCard\";\r\nimport Pagination from \"./Pagination\";\r\nimport { photoGallery } from \"./Gallery.module.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Gallery = props => {\r\n  const { photos, showGallery } = props;\r\n  return (\r\n    <div className={photoGallery}>\r\n      {photos && showGallery && (\r\n        <>\r\n          {photos.map((photo, index) => (\r\n            <PhotoCard\r\n              index={index}\r\n              photo={photo}\r\n              key={`card-photo-${index}`}\r\n            />\r\n          ))}\r\n          <Pagination nextPage={photos.length > 98 ? true : false} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  photos: state.photos.photo,\r\n  showGallery: state.showGallery\r\n});\r\n\r\nexport default connect(mapStateToProps)(Gallery);\r\n","import axios from \"axios\";\r\n\r\nconst loadPhotos = (dispatch, searchInput) => {\r\n  axios({\r\n    method: \"get\",\r\n    url: `${process.env.REACT_APP_API_URL}?method=${\r\n      searchInput\r\n        ? process.env.REACT_APP_API_METHOD_SEARCH\r\n        : process.env.REACT_APP_API_METHOD_RECENT\r\n    }&api_key=${\r\n      process.env.REACT_APP_API_KEY\r\n    }&tags=${searchInput}&sort=relevance&safe_search=1&format=json&nojsoncallback=1`\r\n  }).then(response => {\r\n    dispatch({ type: \"PHOTOS\", photos: response.data.photos });\r\n  });\r\n};\r\n\r\nexport default { loadPhotos };\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { DebounceInput } from \"react-debounce-input\";\r\nimport { searchBox } from \"./SearchBar.module.css\";\r\nimport Api from \"../api/api\";\r\n\r\nconst SearchBar = props => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    if (props.newSearch) {\r\n      ref.current.focus();\r\n    }\r\n  }, [props.newSearch ]);\r\n  return (\r\n    <DebounceInput\r\n      inputRef={ref}\r\n      debounceTimeout={500}\r\n      className={searchBox}\r\n      name='searchInput'\r\n      onChange={props.handleInputChange}\r\n      placeholder={\"Search me...\"}\r\n      autoComplete={\"off\"}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  searchInput: state.searchInput,\r\n  newSearch: state.newSearch\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleInputChange: e => {\r\n      dispatch({ type: \"SEARCH\", value: e.target.value });\r\n      Api.loadPhotos(dispatch, e.target.value);\r\n    },\r\n    handleFocusDone: () => {\r\n      dispatch({ type: \"FOCUSEARCH\", newSearch: false });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SearchBar);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Gallery from \"./components/Gallery\";\r\nimport SearchBar from \"./components/SearchBar\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <header className='App-header'>\r\n          <div>\r\n            <SearchBar />\r\n            <h1>Flickr search</h1>\r\n          </div>\r\n        </header>\r\n        <Gallery />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\n\r\nconst initialState = {\r\n  photos: [],\r\n  searchInput: \"\",\r\n  showGallery: true,\r\n  showPages: 1,\r\n  newSearch: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  console.log(\"reducer\", action);\r\n  switch (action.type) {\r\n    case \"SEARCH\":\r\n      return {\r\n        ...state,\r\n        searchInput: action.value,\r\n        showGallery: false\r\n      };\r\n    case \"PHOTOS\":\r\n      return { ...state, photos: action.photos, showGallery: true };\r\n    case \"FOCUSEARCH\":\r\n      return { ...state, newSearch: action.newSearch };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport dotenv from 'dotenv';\r\nimport store from './store'\r\ndotenv.config()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}